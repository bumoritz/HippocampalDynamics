% function decodingByOutcomeFigure

%% Figure layout

nrows = 4; ncols = 2;
F = default_figure([20,0.5,20,9.9]);

this_set = 'completeSet';
this_trialSet_corre = 'trialsForTestSet_incorrM';

default_figure([20,0.5,20,9.9]);
these_conditions = {'AB','XY','AY','XB'};
for i=1:4
    for o=1:2
        if o==1
            these_trials = intersect(dec.cv.trialsForTestSet_corrM.combined,find(dec.(this_set).trialType==i));
        elseif o==2
            these_trials = intersect(dec.cv.trialsForTestSet_incorrM.combined,find(dec.(this_set).trialType==i));
        end
        this_data = nanmean(dec.(this_set).posterior(:,:,these_trials),3);

        r=c, c= subplot(nrows,ncols,c)
        %imagesc(this_data,[0,prctile(this_decs.(['avgPosterior_type',num2str(c)'])(:),99.5)]);
        imagesc(this_data,[0,0.2]);
        colormap('hot');
        h = colorbar;
        taskLines(p,info,'full','decoding',1,1,0)

        n=0;
        these_ticks = nan(1,dec.supClasses.numSupClasses);
        for i=1:dec.supClasses.numSupClasses
            temp = length(dec.supClasses.bins{i});
            these_ticks(i) = n+temp/2+0.5;
            n=n+temp;
            yline(n+0.5,'LineStyle','-','Color',p.col.gray);
        end
        yticks(these_ticks);
        yticklabels(dec.supClasses.labels_extd);

        temp = dec.(this_set).Y(min(find(dec.(this_set).trialType==c)),:);
        line([1-0.5,26+0.5],[temp(1)-0.5,temp(26)+0.5],'LineStyle','-','Color','g');
        line([27-0.5,52+0.5],[temp(27)-0.5,temp(52)+0.5],'LineStyle','-','Color','g');

        xlabel('Time (s)')
        ylabel('Decoded time (s) and trial type')
        title(['Average Bayesian decoding - ',these_conditions{c},' - ',num2str(length(these_trials)),' trials'])
    end
end
suptitle([this_set,', ',this_trialSet]);